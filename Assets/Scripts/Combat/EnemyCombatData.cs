using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Extension for Combat date suitable for enemy 
/// </summary>
public class EnemyCombatData : CombatData
{
	EEnemyType Enemy;
	private Dictionary<Hex, GameObject> ActiveHexes = new Dictionary<Hex, GameObject>();
    private Dictionary<Hex, GameObject> EmptyHexes = new Dictionary<Hex, GameObject>();
    private Dictionary<Hex, GameObject> AdjacentHexes = new Dictionary<Hex, GameObject>();
	public EnemyAI EnemyAI;

	// Start is called before the first frame update
	void Start()
	{
		// Pull enemy type from data generated by the map
		Enemy = (EEnemyType)Random.Range(0, (int)EEnemyType.NumEnemyTypes);
		switch (Enemy)
		{
			case EEnemyType.Enemy1:
				DeckGenerator.GenerateDeck(deck, DeckLoader.Instance().GetDeck("Enemy Decklist"), this);
				break;
			case EEnemyType.Enemy2:
				DeckGenerator.GenerateDeck(deck, DeckLoader.Instance().GetDeck("Enemy Decklist"), this);
				break;
			case EEnemyType.Enemy3:
				DeckGenerator.GenerateDeck(deck, DeckLoader.Instance().GetDeck("Enemy Decklist"), this);
				break;
			case EEnemyType.Enemy4:
				DeckGenerator.GenerateDeck(deck, DeckLoader.Instance().GetDeck("Enemy Decklist"), this);
				break;
			case EEnemyType.Enemy5:
				DeckGenerator.GenerateDeck(deck, DeckLoader.Instance().GetDeck("Enemy Decklist"), this);
				break;
		}
		foreach (Card card in deck.GetCards())
		{
			card.gameObject.GetComponent<CardDisplay>().isHidden = true;
            card.gameObject.GetComponent<CardDisplay>().UpdateDisplay();
            card.gameObject.GetComponent<CardDrag>().isDraggable = false;
        }
		deck.Shuffle();
		StartCoroutine(ReloadHexes());
	}

    public override void DealDamage(int amount)
    {
        scale.EnemyDealsDamage(amount);
    }

    void GetActiveHexes()
	{
		ActiveHexes.Clear();
		foreach ( KeyValuePair<Hex, GameObject> hex in BoardManager.FieldTiles)
		{
			if (hex.Key.GetCubeCoords().Item2 >= 0 && hex.Value.GetComponent<HexActions>().GetMaterial().name != "NeutralMaterial"
				&& !hex.Value.GetComponent<HexActions>().isOccupied)
			{
				ActiveHexes.Add(hex.Key, hex.Value);
			}
		}
    }
    void GetEmptyHexes()
    {
        EmptyHexes.Clear();
        foreach (KeyValuePair<Hex, GameObject> hex in ActiveHexes)
        {
            if (!hex.Value.GetComponent<HexActions>().isOccupied)
            {
                EmptyHexes.Add(hex.Key, hex.Value);
            }
        }
    }

    void GetAdjacentHexes()
	{
		AdjacentHexes.Clear();
		foreach (Hex active in ActiveHexes.Keys)
		{
			foreach (Hex neighbor in active.AllNeighbors())
			{
				if (BoardManager.FieldTiles.TryGetValue(neighbor, out GameObject go) && 
					go.GetComponent<HexActions>().GetMaterial().name == "NeutralMaterial" &&
					!AdjacentHexes.ContainsKey(neighbor))
                {
                    AdjacentHexes.Add(neighbor, go);
                }
			}
		}
	}

	public HexActions GetRandomEmptyHex()
    {
        if (EmptyHexes.Count == 0) return null;
        int i = Random.Range(0, EmptyHexes.Count);
		List<HexActions> hexes = new List<HexActions>();
		foreach (GameObject hex in EmptyHexes.Values)
		{
			hexes.Add(hex.GetComponent<HexActions>());
		}
		return hexes[i];
    }
    public HexActions GetRandomAdjacentHex()
    {
		if (AdjacentHexes.Count == 0) return null;
        int i = Random.Range(0, AdjacentHexes.Count);
        List<HexActions> hexes = new List<HexActions>();
        foreach (GameObject hex in AdjacentHexes.Values)
        {
            hexes.Add(hex.GetComponent<HexActions>());
        }
        return hexes[i];
    }

    public IEnumerator ReloadHexes()
    {
        yield return new WaitForSeconds(3.1f);
        GetActiveHexes();
		GetEmptyHexes();
        GetAdjacentHexes();
    }

}
